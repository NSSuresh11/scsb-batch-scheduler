buildscript {
	ext {
		springBootVersion = '2.7.1'
		set('springCloudVersion', "2021.0.3")
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'org.springframework.boot' version '2.5.12'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.sonarqube" version "3.3"
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'

jar {
	archiveBaseName = 'scsb-batch-scheduler'
	archiveVersion = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.17
targetCompatibility = 1.17

repositories {
	mavenCentral()
}


dependencies {
	implementation fileTree(dir: '/data/commonjar', include: '*2.2.jar')
	implementation('org.springframework.boot:spring-boot-starter')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.batch:spring-batch-core:4.3.4')
	implementation('org.springframework.boot:spring-boot-starter-batch')
	implementation('org.quartz-scheduler:quartz:2.3.2')
	implementation("org.springframework.batch:spring-batch-admin-manager:1.3.1.RELEASE") {
		exclude group: 'org.slf4j', module:'slf4j-log4j12';
	}
	implementation('com.thoughtworks.xstream:xstream:1.4.18')
	implementation("org.springframework.batch:spring-batch-admin-resources:1.3.1.RELEASE") {
		exclude group: 'org.slf4j', module:'slf4j-log4j12'
	}
	implementation('org.projectlombok:lombok:1.18.22')
	annotationProcessor('org.projectlombok:lombok:1.18.22')
	testImplementation('org.projectlombok:lombok:1.18.22')
	testAnnotationProcessor('org.projectlombok:lombok:1.18.22')
	implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.26'
	//implementation("org.springframework.boot:spring-boot-starter-actuaor")
	implementation('org.apache.camel:camel-activemq:3.14.0')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.apache.activemq:activemq-camel:5.15.15')
	implementation('org.apache.activemq:activemq-pool:5.15.15')
	implementation('org.apache.activemq:activemq-broker:5.15.15')
	implementation('org.apache.activemq:activemq-client:5.15.15')
	implementation('org.apache.camel.springboot:camel-spring-boot-starter:3.14.0')
	implementation('org.apache.camel:camel-jms:3.14.0')
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	implementation 'net.logstash.logback:logstash-logback-encoder:6.4'

	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
	implementation group: 'org.json', name: 'json', version: '20211205'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
	testImplementation('org.springframework.batch:spring-batch-test')

	testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
	testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
}

configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == 'org.apache.logging.log4j') {
			details.useVersion '2.17.0'
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}


jacoco {
	toolVersion = "0.8.7"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}


task scsbBatchSchedulerJavadocs(type: Javadoc) {
	source = sourceSets.main.java
	classpath = configurations.implementation
	options.addStringOption('Xdoclint:none', '-quiet')
	String home = System.getProperty("user.home");
	destinationDir =  new File(home+"/scsb-javadocs/scsb-batch-scheduler");

}

/* bootJar {
	layered()
} */

jar {
	enabled = false
	archiveClassifier = '' //use empty string
}
